[{"C:\\Users\\alexa\\Desktop\\Graal\\src\\index.js":"1","C:\\Users\\alexa\\Desktop\\Graal\\src\\App.js":"2","C:\\Users\\alexa\\Desktop\\Graal\\src\\store\\stocks-actions.js":"3","C:\\Users\\alexa\\Desktop\\Graal\\src\\store\\stock-slice.js":"4","C:\\Users\\alexa\\Desktop\\Graal\\src\\store\\index.js":"5","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year1.js":"6","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year2.js":"7","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\EstimatedCAGR.js":"8","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year4.js":"9","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year5.js":"10","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year3.js":"11","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\SharesOutstanding.js":"12","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\MarketCap.js":"13","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Sales.js":"14","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\PS.js":"15","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\PE.js":"16","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\NetMargin.js":"17","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Row.js":"18","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\YearOfEstimation.js":"19","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\WorstPS.js":"20","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\WorstPE.js":"21","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\CalculatedSalesByCAGR.js":"22","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Buttons.js":"23","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Dilution.js":"24","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\InvestmentYieldWorstCase.js":"25","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\InvestmentMultpl.js":"26","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\UI\\LoadingSpinner.js":"27","C:\\Users\\alexa\\Desktop\\Graal\\src\\pages\\Top.js":"28","C:\\Users\\alexa\\Desktop\\Graal\\src\\pages\\Layout.js":"29","C:\\Users\\alexa\\Desktop\\Graal\\src\\pages\\StockDetail.js":"30","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\UI\\Skeleton.js":"31"},{"size":359,"mtime":1639308093569,"results":"32","hashOfConfig":"33"},{"size":2020,"mtime":1639498624820,"results":"34","hashOfConfig":"33"},{"size":8167,"mtime":1639665902494,"results":"35","hashOfConfig":"33"},{"size":7456,"mtime":1639577340504,"results":"36","hashOfConfig":"33"},{"size":201,"mtime":1639058847816,"results":"37","hashOfConfig":"33"},{"size":859,"mtime":1639080853488,"results":"38","hashOfConfig":"33"},{"size":859,"mtime":1639080856436,"results":"39","hashOfConfig":"33"},{"size":273,"mtime":1639221905574,"results":"40","hashOfConfig":"33"},{"size":859,"mtime":1639080860789,"results":"41","hashOfConfig":"33"},{"size":859,"mtime":1639080863023,"results":"42","hashOfConfig":"33"},{"size":859,"mtime":1639080858597,"results":"43","hashOfConfig":"33"},{"size":979,"mtime":1639080844567,"results":"44","hashOfConfig":"33"},{"size":250,"mtime":1639073885676,"results":"45","hashOfConfig":"33"},{"size":859,"mtime":1639224193832,"results":"46","hashOfConfig":"33"},{"size":222,"mtime":1639221992810,"results":"47","hashOfConfig":"33"},{"size":222,"mtime":1639221989672,"results":"48","hashOfConfig":"33"},{"size":899,"mtime":1639080838512,"results":"49","hashOfConfig":"33"},{"size":4105,"mtime":1639326249598,"results":"50","hashOfConfig":"33"},{"size":912,"mtime":1639080870661,"results":"51","hashOfConfig":"33"},{"size":242,"mtime":1639222000140,"results":"52","hashOfConfig":"33"},{"size":879,"mtime":1639221997493,"results":"53","hashOfConfig":"33"},{"size":319,"mtime":1639073772577,"results":"54","hashOfConfig":"33"},{"size":771,"mtime":1639561862101,"results":"55","hashOfConfig":"33"},{"size":889,"mtime":1639080829152,"results":"56","hashOfConfig":"33"},{"size":388,"mtime":1639501804522,"results":"57","hashOfConfig":"33"},{"size":339,"mtime":1639054360333,"results":"58","hashOfConfig":"33"},{"size":175,"mtime":1639135151584,"results":"59","hashOfConfig":"33"},{"size":2313,"mtime":1642073483542,"results":"60","hashOfConfig":"33"},{"size":5225,"mtime":1639577457407,"results":"61","hashOfConfig":"33"},{"size":2305,"mtime":1639517012539,"results":"62","hashOfConfig":"33"},{"size":647,"mtime":1639577491108,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1szw93c",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\Users\\alexa\\Desktop\\Graal\\src\\index.js",[],["131","132"],"C:\\Users\\alexa\\Desktop\\Graal\\src\\App.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\store\\stocks-actions.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\store\\stock-slice.js",["133"],"import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst template = {\r\n  ticker: \"\",\r\n  price: 0,\r\n  potential: 0,\r\n  marketCap: 0,\r\n  sales: 0,\r\n  estimatedCAGR: 0,\r\n  PS: 0,\r\n  PE: 0,\r\n  dilution: 0,\r\n  ivestmentMultpl: 0,\r\n  investmentYieldOptimistic: 0,\r\n  optimisticPS: 0,\r\n  optimisticPE: 0,\r\n  investmentYieldWorstCase: 0,\r\n  worstPS: 0,\r\n  worstPE: 0,\r\n  year1: 0,\r\n  year2: 0,\r\n  year3: 0,\r\n  year4: 0,\r\n  year5: 0,\r\n  calculatedSalesByCAGR: 0,\r\n  netMargin: 0,\r\n  sharesOutstanding: 0,\r\n  yearOfEstimation: 0,\r\n  grossMargin: 0,\r\n};\r\n\r\nconst tickerBase = [\r\n  \"AMZN\",\r\n  \"ACN\",\r\n  \"TCEHY\",\r\n  \"INTC\",\r\n  \"SFTBY\",\r\n  \"AAPL\",\r\n  \"MSFT\",\r\n  \"FB\",\r\n  \"GOOG\",\r\n  \"NILSY\",\r\n  \"\",\r\n  \"CRM\",\r\n  \"PYPL\",\r\n  \"ASML\",\r\n  \"NFLX\",\r\n  \"TSLA\",\r\n  \"NVDA\",\r\n  \"DIS\",\r\n  \"ADBE\",\r\n  \"\",\r\n  \"SHOP\",\r\n  \"NOW\",\r\n  \"INTU\",\r\n  \"UBER\",\r\n  \"ABNB\",\r\n  \"YNDX\",\r\n  \"CMG\",\r\n  \"SQ\",\r\n  \"AMD\",\r\n  \"SE\",\r\n  \"MELI\",\r\n  \"TME\",\r\n  \"SPOT\",\r\n  \"PINS\",\r\n  \"WDAY\",\r\n  \"PDD\",\r\n  \"\",\r\n  \"TEAM\",\r\n  \"DOCU\",\r\n  \"TWLO\",\r\n  \"ZM\",\r\n  \"NIO\",\r\n  \"VRM\",\r\n  \"CVNA\",\r\n  \"ZNGA\",\r\n  \"OZON\",\r\n  \"EPAM\",\r\n  \"ADSK\",\r\n  \"ROKU\",\r\n  \"ADYEY\",\r\n  \"RBLX\",\r\n  \"SPLK\",\r\n  \"DASH\",\r\n  \"TCS\",\r\n  \"DASH\",\r\n  \"TDOC\",\r\n  \"\",\r\n  \"CRWD\",\r\n  \"S\",\r\n  \"NET\",\r\n  \"FSLY\",\r\n  \"OKTA\",\r\n  \"DDOG\",\r\n  \"ZS\",\r\n  \"SNOW\",\r\n  \"PLTR\",\r\n  \"AI\",\r\n  \"MDB\",\r\n  \"ESTC\",\r\n  \"AYX\",\r\n  \"TTD\",\r\n  \"COUP\",\r\n  \"APPN\",\r\n  \"AFRM\",\r\n  \"CGNX\",\r\n  \"FUBO\",\r\n  \"BYND\",\r\n  \"CURI\",\r\n  \"ZEN\",\r\n  \"STNE\",\r\n  \"OCFT\",\r\n  \"BASE\",\r\n  \"SKLZ\",\r\n  \"CHPT\",\r\n  \"WIX\",\r\n  \"PATH\",\r\n  \"CFLT\",\r\n  \"DOCS\",\r\n  \"GRAB\",\r\n  \"UPST\",\r\n  \"GLBE\",\r\n  \"GTLB\",\r\n  \"FVRR\",\r\n  \"UPWK\",\r\n  \"\",\r\n  \"BILI\",\r\n  \"HUYA\",\r\n  \"TME\",\r\n  \"\",\r\n  \"SEDG\",\r\n  \"ENPH\",\r\n  \"CSIQ\",\r\n  \"\",\r\n  \"MP\",\r\n  \"CRSP\",\r\n  \"\",\r\n  \"MILE\",\r\n  \"LMND\",\r\n  \"CLOV\",\r\n  \"OPEN\",\r\n  \"QS\",\r\n  \"DM\",\r\n  \"SPCE\",\r\n  \"SOFI\",\r\n  \"SUNL\",\r\n  \"LATCH\",\r\n  \"MTTR\",\r\n  \"BGRY\",\r\n  \"OTMO\",\r\n  \"PTRA\",\r\n];\r\n\r\nconst map = new Map([\r\n  [\"Price\", \"price\"],\r\n  [\"Market Cap, bln\", \"marketCap\"],\r\n  [\"Sales, bln\", \"sales\"],\r\n  [\"Estimated CAGR\", \"estimatedCAGR\"],\r\n  [\"P/S\", \"PS\"],\r\n  [\"P/E\", \"PE\"],\r\n  [\"Dilution\", \"dilution\"],\r\n  [\"Investment Multpl\", \"ivestmentMultpl\"],\r\n  [\"Investment Yield Optimistic\", \"investmentYieldOptimistic\"],\r\n  [\"best P/S\", \"optimisticPS\"],\r\n  [\"best P/E\", \"optimisticPE\"],\r\n  [\"Investment Yield Worst Case\", \"investmentYieldWorstCase\"],\r\n  [\"Worst P/S\", \"worstPS\"],\r\n  [\"Worst P/E\", \"worstPE\"],\r\n  [\"Year 1\", \"year1\"],\r\n  [\"Year 2\", \"year2\"],\r\n  [\"Year 3\", \"year3\"],\r\n  [\"Year 4\", \"year4\"],\r\n  [\"Year 5\", \"year5\"],\r\n  [\"Sales by CAGR, bln\", \"calculatedSalesByCAGR\"],\r\n  [\"Net Margin\", \"netMargin\"],\r\n  [\"Shares, mln\", \"sharesOutstanding\"],\r\n  [\"Estimation Years\", \"yearOfEstimation\"],\r\n  [\"Gross Margin\", \"grossMargin\"],\r\n]);\r\n\r\nconst stocksSlice = createSlice({\r\n  name: \"stocks\",\r\n  initialState: {\r\n    stocks: [],\r\n    changed: false,\r\n    tickerBase,\r\n    filteredTicker: \"\",\r\n    isFetchingFinished: true,\r\n    dbFetched: false,\r\n    stocksDeleted: [],\r\n    sort: false,\r\n    sortTicker: \"\",\r\n  },\r\n  reducers: {\r\n    changeStockPrice(state, action) {\r\n      const stockTicker = action.payload.ticker;\r\n      const stockPrice = action.payload.price;\r\n      state.changed = true;\r\n      console.log(\"Start to change Stock Price/ state.stocks:\", state.stocks);\r\n\r\n      const existingStock = state.stocks.find(\r\n        (el) => el.ticker === stockTicker\r\n      );\r\n      if (existingStock) {\r\n        console.log(\"Stock existed\");\r\n        existingStock.price = stockPrice;\r\n      } else {\r\n        console.log(\"Stock creating\");\r\n        state.stocks.push({\r\n          ...template,\r\n          ticker: stockTicker,\r\n          price: stockPrice,\r\n        });\r\n      }\r\n    },\r\n    updateSiteData(state, action) {\r\n      console.log(\"Starting to update site/ action.payload:\", action.payload);\r\n      state.stocks = action.payload.stocks;\r\n      console.log(\"Finished to update site/ state.stocks:\", state.stocks);\r\n    },\r\n    updateProperty(state, action) {\r\n      const stockTicker = action.payload.ticker;\r\n      const propertyValue = action.payload.propertyValue;\r\n      const propertyName = action.payload.propertyName;\r\n      state.changed = true;\r\n      console.log(\r\n        \"Starting update property:\",\r\n        stockTicker,\r\n        propertyValue,\r\n        propertyName,\r\n        state.changed\r\n      );\r\n      const existingStock = state.stocks.find(\r\n        (el) => el.ticker === stockTicker\r\n      );\r\n      if (existingStock) {\r\n        console.log(\"Stock existed\");\r\n        existingStock[propertyName] = propertyValue;\r\n      }\r\n    },\r\n    filter(state, action) {\r\n      const incomingTicker = action.payload;\r\n      state.filteredTicker = incomingTicker;\r\n    },\r\n    calculateParameters(state, action) {\r\n      const stockTicker = action.payload;\r\n      console.log(\"Started calculateParameters for : \", stockTicker);\r\n      const existingStock = state.stocks.find(\r\n        (el) => el.ticker === stockTicker\r\n      );\r\n\r\n      existingStock.marketCap =\r\n        (existingStock.sharesOutstanding * existingStock.price) / 1000;\r\n      existingStock.estimatedCAGR =\r\n        (Math.pow(\r\n          (existingStock.year1 / 100 + 1) *\r\n            (existingStock.year2 / 100 + 1) *\r\n            (existingStock.year3 / 100 + 1) *\r\n            (existingStock.year4 / 100 + 1) *\r\n            (existingStock.year5 / 100 + 1),\r\n          0.2\r\n        ) -\r\n          1) *\r\n        100;\r\n      existingStock.PS = existingStock.marketCap / existingStock.sales;\r\n      existingStock.PE = (existingStock.PS * 100) / existingStock.netMargin;\r\n      existingStock.calculatedSalesByCAGR =\r\n        existingStock.sales *\r\n        Math.pow(\r\n          existingStock.estimatedCAGR / 100 + 1,\r\n          existingStock.yearOfEstimation\r\n        );\r\n      existingStock.worstPS =\r\n        (existingStock.worstPE * existingStock.netMargin) / 100;\r\n      existingStock.investmentYieldWorstCase =\r\n        (Math.pow(\r\n          (existingStock.calculatedSalesByCAGR * existingStock.worstPS) /\r\n            existingStock.marketCap /\r\n            Math.pow(\r\n              1 + existingStock.dilution / 100,\r\n              existingStock.yearOfEstimation\r\n            ),\r\n          1 / existingStock.yearOfEstimation\r\n        ) -\r\n          1) *\r\n        100;\r\n      existingStock.ivestmentMultpl = Math.pow(\r\n        1 + existingStock.investmentYieldWorstCase / 100,\r\n        existingStock.yearOfEstimation\r\n      );\r\n    },\r\n    isFetchingFinishedHandler(state, action) {\r\n      state.isFetchingFinished = action.payload;\r\n      console.log(\" isFetchingFinishedHandler :\", state.isFetchingFinished);\r\n    },\r\n    stockChangedHandler(state, action) {\r\n      state.changed = action.payload;\r\n      console.log(\"changed \", state.changed);\r\n    },\r\n    stockDeleting(state, { payload: ticker }) {\r\n      const deletedStock = state.stocks.find((el) => el.ticker === ticker);\r\n      state.stocksDeleted.push(deletedStock);\r\n      state.tickerBase = state.tickerBase.filter((el) => el !== ticker);\r\n    },\r\n    dbFetchedHandler(state, action) {\r\n      state.dbFetched = action.payload;\r\n      console.log(\"dbFetched changed to \", state.dbFetched);\r\n    },\r\n    sortHandler(state, { payload: title }) {\r\n      state.sort = !state.sort;\r\n      // if (title !== undefined) {\r\n      //   const property = map.get(title);\r\n      //   console.log(\"State property \", property);\r\n      //   state.sortTicker = property;\r\n      // }\r\n    },\r\n  },\r\n});\r\n\r\nexport const stocksActions = stocksSlice.actions;\r\nexport default stocksSlice;\r\n","C:\\Users\\alexa\\Desktop\\Graal\\src\\store\\index.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year1.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year2.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\EstimatedCAGR.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year4.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year5.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Year3.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\SharesOutstanding.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\MarketCap.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Sales.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\PS.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\PE.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\NetMargin.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Row.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\YearOfEstimation.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\WorstPS.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\WorstPE.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\CalculatedSalesByCAGR.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Buttons.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\Dilution.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\InvestmentYieldWorstCase.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\Cells\\InvestmentMultpl.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\UI\\LoadingSpinner.js",[],["134","135"],"C:\\Users\\alexa\\Desktop\\Graal\\src\\pages\\Top.js",["136","137"],"import { useDispatch } from \"react-redux\";\r\nimport classes from \"./Top.module.css\";\r\nimport {\r\n  sendStocksData,\r\n  fetchStockPrice,\r\n  repackingStocksDataBase,\r\n} from \"../store/stocks-actions\";\r\nimport { useRef } from \"react\";\r\nimport { stocksActions } from \"../store/stock-slice\";\r\nimport React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst titles = [\r\n  \"Price\",\r\n  \"Market Cap, bln\",\r\n  \"Sales, bln\",\r\n  \"Estimated CAGR\",\r\n  \"P/S\",\r\n  \"P/E\",\r\n  \"Dilution\",\r\n  \"Investment Multpl\",\r\n  \"Investment Yield Worst Case\",\r\n  \"Worst P/S\",\r\n  \"Worst P/E\",\r\n  \"Year 1\",\r\n  \"Year 2\",\r\n  \"Year 3\",\r\n  \"Year 4\",\r\n  \"Year 5\",\r\n  \"Sales by CAGR, bln\",\r\n  \"Investment Yield Optimistic\",\r\n  \"best P/S\",\r\n  \"best P/E\",\r\n  \"Net Margin\",\r\n  \"Estimation Years\",\r\n  \"Shares, mln\",\r\n  \"Gross Margin\",\r\n];\r\n\r\nconst Top = () => {\r\n  const dispatch = useDispatch();\r\n  const filterInputRef = useRef();\r\n  const history = useHistory();\r\n  console.log(\"Top component rendered\");\r\n\r\n  const FetchToDBHandler = () => {\r\n    dispatch(sendStocksData());\r\n    console.log(\"Sent Data to DB\");\r\n  };\r\n  const FetchPricesHandler = () => {\r\n    // dispatch(repackingStocksDataBase());\r\n    dispatch(fetchStockPrice());\r\n  };\r\n\r\n  const filterHandler = () => {\r\n    const tickerFilter = filterInputRef.current.value.toUpperCase();\r\n    dispatch(stocksActions.filter(tickerFilter));\r\n  };\r\n\r\n  const sortingHandler = (el) => {\r\n    const title = el;\r\n    history.push(`/main?sort=${title}`);\r\n    dispatch(stocksActions.sortHandler(title));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <div className={classes.cell}>\r\n        <button onClick={FetchToDBHandler}>Send to DB</button>\r\n        <button onClick={FetchPricesHandler}>Fetch Prices</button>\r\n      </div>\r\n\r\n      <input\r\n        className={classes.cell}\r\n        type=\"text\"\r\n        onChange={filterHandler}\r\n        ref={filterInputRef}\r\n        value={filterInputRef.current?.value.toUpperCase()}\r\n      />\r\n\r\n      {titles.map((el, index) => (\r\n        <div\r\n          className={`${classes.cellTop} hand`}\r\n          key={`${el}*${index}`}\r\n          id={el}\r\n          onClick={() => sortingHandler(el)}\r\n        >\r\n          <p>{el}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Top);\r\n","C:\\Users\\alexa\\Desktop\\Graal\\src\\pages\\Layout.js",[],"C:\\Users\\alexa\\Desktop\\Graal\\src\\pages\\StockDetail.js",["138","139"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Row from \"../components/Row\";\r\nimport classes from \"./StockDetail.module.css\";\r\nimport React from \"react\";\r\nimport { stocksActions } from \"../store/stock-slice\";\r\n\r\nconst StockDetail = () => {\r\n  //   const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const ticker = params.stockTicker;\r\n  const stocks = useSelector((state) => state.stocks.stocks);\r\n  const stockForRendering = stocks.find((el) => el.ticker === ticker);\r\n  //   dispatch(stocksActions.sortHandler());\r\n  console.log(stockForRendering);\r\n\r\n  return (\r\n    <div className={classes.layout}>\r\n      <div className={classes.row}>\r\n        <Row stock={stockForRendering} key={`${ticker}/stock-detail`} />\r\n      </div>\r\n\r\n      <ul>\r\n        <li key=\"revenue\">\r\n          <a\r\n            href={`https://www.macrotrends.net/stocks/charts/${ticker}/gitlab/revenue`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Revenues\r\n          </a>\r\n        </li>\r\n        <li key=\"Shares-outstanding\">\r\n          <a\r\n            href={`https://www.macrotrends.net/stocks/charts/${ticker}/gitlab/shares-outstanding`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Shares-outstanding\r\n          </a>\r\n        </li>\r\n        <li key=\"Price-sales\">\r\n          <a\r\n            href={`https://www.macrotrends.net/stocks/charts/${ticker}/gitlab/price-sales`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Price-sales\r\n          </a>\r\n        </li>\r\n        <li key=\"Net-profit-margin\">\r\n          <a\r\n            href={`https://www.macrotrends.net/stocks/charts/${ticker}/gitlab/net-profit-margin`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Net-profit-margin\r\n          </a>\r\n        </li>\r\n        <li key=\"Market cap\">\r\n          <a\r\n            href={`https://www.macrotrends.net/stocks/charts/${ticker}/gitlab/market-cap`}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Market cap\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(StockDetail);\r\n","C:\\Users\\alexa\\Desktop\\Graal\\src\\components\\UI\\Skeleton.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":155,"column":7,"nodeType":"146","messageId":"147","endLine":155,"endColumn":10},{"ruleId":"140","replacedBy":"148"},{"ruleId":"142","replacedBy":"149"},{"ruleId":"144","severity":1,"message":"150","line":6,"column":3,"nodeType":"146","messageId":"147","endLine":6,"endColumn":26},{"ruleId":"144","severity":1,"message":"151","line":11,"column":22,"nodeType":"146","messageId":"147","endLine":11,"endColumn":33},{"ruleId":"144","severity":1,"message":"152","line":1,"column":10,"nodeType":"146","messageId":"147","endLine":1,"endColumn":21},{"ruleId":"144","severity":1,"message":"153","line":6,"column":10,"nodeType":"146","messageId":"147","endLine":6,"endColumn":23},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'map' is assigned a value but never used.","Identifier","unusedVar",["154"],["155"],"'repackingStocksDataBase' is defined but never used.","'useLocation' is defined but never used.","'useDispatch' is defined but never used.","'stocksActions' is defined but never used.","no-global-assign","no-unsafe-negation"]